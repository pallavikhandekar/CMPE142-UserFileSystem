#include <sys/types.h>
#include <sys/socket.h>
#include <linux/netlink.h>
#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <signal.h>
#include <unistd.h>
#include <string.h>

#define NETLINK_USER 31
#define NETLINK_TEST 17
#define MAX_PAYLOAD 2048

#define RUNNING_DIR "/tmp"
#define LOCK_FILE "daemon_one.lock"
#define LOG_FILE "daemon_one.log"

void log_message(filename,message)
char *filename;
char *message;
{
FILE *logfile;
logfile=fopen(filename,"a");
if(!logfile) return;
fprintf(logfile,"%s\n",message);
fclose(logfile);
}

void signal_handler(sig)
int sig;
{
  switch(sig) 
	{
 		case SIGHUP:
			log_message(LOG_FILE,"Caught : Hangup Signal");
			break;

		case SIGTERM:
			log_message(LOG_FILE,"Caught : Terminate Signal");
			exit(0);
			break;
	}
}

void daemonize()
{
	int i,lfp;
	char str[10];
	/* already a daemon */
	if(getppid()==1) return; 

	i=fork();
	/* fork error */
	if (i<0) exit(1); 
	/* parent exits */
	if (i>0) exit(0); 

	/* child (daemon) continues */
	setsid();

	/* close all descriptors */
	for (i=getdtablesize();i>=0;--i) 
		close(i); 

	i=open("/dev/null",O_RDWR); dup(i); dup(i); /* handle standart I/O */

	 /* set newly created file permissions */
	umask(027);

	 /* change running directory */
	chdir(RUNNING_DIR);

	lfp=open(LOCK_FILE,O_RDWR|O_CREAT,0640);

	if (lfp<0) exit(1); /* cannot open */

	if (lockf(lfp,F_TLOCK,0)<0) exit(0); /* cannot lock */

	/* first instance continues */
	sprintf(str,"%d\n",getpid());

	write(lfp,str,strlen(str)); /* record pid to lockfile */

	signal(SIGCHLD,SIG_IGN); /* ignore child */
	signal(SIGTSTP,SIG_IGN); /* ignore tty signals */
	signal(SIGTTOU,SIG_IGN);
	signal(SIGTTIN,SIG_IGN);
	signal(SIGHUP,signal_handler); /* catch hangup signal */
	signal(SIGTERM,signal_handler); /* catch kill signal */
}


struct sockaddr_nl src_addr, dest_addr;
struct nlmsghdr *nlh = NULL;
struct iovec iov;
struct msghdr msg;
int sock_fd;

struct fileInfo
    {
  char name;
  int size;
  char *data;
    } ;

struct fileInfo fi[20];
int count = 0;
int *ptr_one;

int* OpenFile(fname)
{

  int i = 0;
  for (i=0 ; i < sizeof(fi); i++)
  {
 
	//if(fi[count] <= sizeof(fi))
	{
		if (fi[i].name == fname)
		{
			printf ("File already exists\n");	
			return 0;
        	}


		else
		{
			ptr_one = (int *)malloc(sizeof(fi));
		

			if (ptr_one == 0)
			{
				printf("ERROR: Out of memory\n");
				return 1;
			}

			fi[count].name = fname;
			fi[count].size = &ptr_one;
			count++;

			return *ptr_one;
		}
   	}
	//else
	//{
    	//	printf ("Oops! Memory Full! \n");
	//}
  }
}


main()
{
	daemonize();

	
	while(1)
	{
		sleep(1);
		char buffer[20];	
		char open[10];
		char delimiter[] = " ";
		char *message = msg.msg_name;
		char *op= strtok((char)&message, delimiter);

		char *fname = strrchr((char)&message, ' ');
			fname = fname+1;
		if(fname && *(fname+1));
		int *retFileHeader;


		strcpy(open,"OPEN");
		if(strcmp(op,open)==0)
		{   
			printf("Receive OPEN :");
			retFileHeader= OpenFile(fname);
			

			sprintf(buffer, "OPEN %s", retFileHeader);

			//return buffer;//return open memblock
			
			
			sock_fd = socket(PF_NETLINK, SOCK_RAW,NETLINK_TEST);

			memset(&src_addr, 0, sizeof(src_addr));
		 	src_addr.nl_family = AF_NETLINK;
		 	src_addr.nl_pid = getpid();  /* self pid */
		 	src_addr.nl_groups = 0;  /* not in mcast groups */
		 	bind(sock_fd, (struct sockaddr*)&src_addr,
		      	sizeof(src_addr));

			memset(&dest_addr, 0, sizeof(dest_addr));
		 	dest_addr.nl_family = AF_NETLINK;
		 	dest_addr.nl_pid = 0;   /* For Linux Kernel*/
		 	dest_addr.nl_groups = 0; /* unicast */
	
		 	nlh=(struct nlmsghdr *)malloc(NLMSG_SPACE(MAX_PAYLOAD));
		 
			/* Fill the netlink message header */
			nlh->nlmsg_len = NLMSG_SPACE(MAX_PAYLOAD);
			nlh->nlmsg_pid = getpid();  /* self pid */
			nlh->nlmsg_flags = 0;
	 	
			/* Fill in the netlink message payload */
			strcpy(NLMSG_DATA(nlh), buffer);

		 	iov.iov_base = (void *)nlh;
		 	iov.iov_len = nlh->nlmsg_len;
			msg.msg_name = (void *)&dest_addr;
			msg.msg_namelen = sizeof(dest_addr);
			msg.msg_iov = &iov;
			msg.msg_iovlen = 1;

			//sendmsg(sock_fd, &msg, 0);
			sendmsg(sock_fd, NLMSG_DATA(nlh),0);
			
		}

	}
}







